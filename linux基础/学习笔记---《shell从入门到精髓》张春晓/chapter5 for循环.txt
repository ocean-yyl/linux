1，带列表的for循环（步进循环）
①for variable in {list}
do
    statement1
    statement2
    ~~~
done（闭合循环）
例如：
for var in {1 2 3 4 5 6 7 8}【等价于for var in {1..8}】
do
   echo $var
done（闭合循环）
②for variable in {start..end..step}(step为步长)
do
    statement1
    statement2
    ~~~
done（闭合循环）
③带列表的for可以使用字符串
for var in {mon tue wed thu fri sat sun}【等价于for var in mon tue ~~~sun】
do
   echo $var
done（闭合循环）
④还可以通过其他方式来获得列表，例如ls命令
例如：
for file in $(ls)【$()的作用就是将其中的字符串作为shell命令来执行，与反引号作用相同】
do
echo "$file"
done

2，不带列表的for循环结合1-④来看，不带列表的for只能从命令行中获取列表。
例如：
for arg
do
echo -n "$arg"
done

执行方式：./test.sh a b c
>a b c

3，类C风格for循环
for((expression1;expression2;expression3))【!注意是两个圆括号括起来!】
do
    statement1
    statement2
    ~~~
done

4，使用for循环处理数组
for variable in ${array[*]}
do
    statement1
    statement2
    ~~~
done（闭合循环）
>
定义数组：array=(mon tue wed thu fri sat sun)

-------for结束-------------
5，until循环（不断地重复执行，直到某个条件成立【expression返回0】）
until expression
do
    statement1
    statement2
    ~~~
done（闭合循环）
注意：在每次执行之前，until都会先判断expression的值，若为0（成功），则退出循环。
-------until结束-------------
6，while循环（不断地重复执行，直到某个条件不成立【expression返回非0】）
注意while和untile的条件正好相反。
while expression
do
    statement1
    statement2
    ~~~
done（闭合循环）
通过结束标志控制while循环---exit 0---退出线程（关闭terminal窗口）。

7，使用printf和echo -n 都可以实现不换行输出【windows cmd不适应】
printf "hello"
echo -n "hello"

8，使用break和continue控制循环。
break 2----退出两层循环
continue 2---跳过2层循环，但不常用。（几乎没有作用）
