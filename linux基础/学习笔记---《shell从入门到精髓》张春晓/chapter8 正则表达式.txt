“正则表达式是对文本进行过滤地工具”

一，正则表达式学习方法
1，重点在于理解元字符【元字符：用来描述字符的字符】
2，掌握好语法
3，开拓思路
4，要保证一个正则表达式正确，就需要不断地测试。

二，正则表达式
1，行首限定符【^】
例如str='ls /etc | grep "^po"'

！！！注意：不要将【^po】理解为以字符串po开头的文本行，而是理解为第一个字符为p，紧跟着第二个字符为o的文本行。
2，行尾限定符【$】
例如str='ls /etc | grep "txt$"'

3，单个字符匹配【.】
例如str='ls /etc | grep "sam."'
例如str='ls /etc | grep "sa..m"'

4，限定符【*】
？？？？？？？？？？？？？

5，字符集匹配【[abc]】
例如str='ls /etc | grep "^rc[0-9]"'

6，字符集不匹配【[^abc]】

===================================
egrep默认使用扩展正则表达式，grap默认使用正则表达式
===================================
扩展正则表达式>>>
7，限定符【+】

8，限定符【?】

9，竖线和圆括号【|   ()】
|---或的逻辑关系
()---一组可选的值
例如str='ls /etc | egrep "(ssh|ssy|^yun)"'

Perl正则表达式>>>
10，数字匹配【\d 等价于[0-9]】

11，非数字匹配【\D 等价于[^0-9]】

12，空白字符匹配【\s 等价于[\f\n\r\t\v]】
匹配任意空白字符，包括换行，制表，换页。

13，非空白字符匹配【\S 等价于[^\f\n\r\t\v]】

>>>>>>【常用POSIX字符类。】>>>>>>
[:alnum:]---匹配任意一个字母或数字
[:alpha:]---匹配任意一个字母
[:digit:]---匹配任意一个数字
[:lower:]---匹配任意一个小写字母
[:upper:]---匹配任意一个大写字母
[:space:]---匹配任意一个空白字符【包括空格，制表符，换行符，分页符】
[:blank:]---匹配任意一个空格和制表符
[:graph:]---匹配任意一个看得见的可打印字母，不包括空白字符
[:print:]---匹配任意一个看得见的可打印字母，包括空白字符
[:cntrl:]---匹配任意一个控制字符，即ASSCII字符集前32个字符
[:punct:]---匹配任意一个标点符号
[:xdigit:]---匹配十六进制数字。即0-9，a-f，A-F

=========================================
14，grep命令【使用正则表达式来全局搜索，并打印匹配的文本】
语法：grep [options] pattern [file...]

..........