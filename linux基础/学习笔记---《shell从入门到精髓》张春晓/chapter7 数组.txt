注意：shell中数组的索引从0开始。
使用圆括号()，得到数组。

一，定义数组
---1，通过指定元素值
语法：array[key]=value
例如：
array[3]=three
array[6]=six
echo "${array[@]}"

---2，通过declare声明数组，之后为其赋值（除关联数组，一般不用declare）
语法：declare -a array【声明索引数组，索引为数字】
array[3]=three
array[6]=six
echo "${array[@]}"

---3，通过元素值集合
语法：array=(v0 v1 v2 ~~ vn)

---4，通过键值对
语法：array([0]=v0 [1]=v1 ~~ [n]=vn)
【关联数组】（相当于键值对）
shell中数组的索引值可以不是整数，还可以是字符串，这称为关联数组。在使用关联数组时，需要首先declare声明数组，然后再使用键值对的形式赋值。
语法：declare -A array【声明关联数组，索引是string】
注意：关联数组在bash4.0及以上版本支持。
例如：
declare -A array
array=([flower]=rose [fruit]=apple)
echo "${array[@]}"
列出数组索引：
echo ${!array[@|*]}

---5，数组和普通变量
普通变量可以当作数组来处理。
va 相当于va[0]

===========================================================

二，数组的赋值
1，按索引赋值
语法：array[n]=valuen

2，通过集合
语法：array=(a b c d)
注意：【这相当于直接定义（替换）】当为一个数组提供一组值时，shell会从第一个元素[0]开始，依次赋值给每个下标。当新的值超过原来的数组长度，自动末尾追加；当新的值个数少于原来，删除多余。
注意：在使用值集合时，若某个值含有空格，需要用单引号或双引号将其引用起来。否则shell会认为其是两个元素。在引用是也要加上双引号。

3，在数组末尾追加元素
就是通过索引为数组赋值。
注意：无论以何种方式为关联数组（相当于键值对）赋值，都需要显示的指定元素下标。

4，通过循环为数组赋值

===========================================================

三，数组的访问
1，访问第一个数组元素
echo "${array}"
或者
echo "${array[0]}"

2，通过下标访问数组元素
语法：array[n]
echo "${array[n]}"

3，计算数组长度
语法:---${array[@]}或${array[*]}

获取某个数组元素的长度：${#array[n]}

4，通过循环遍历数组元素
5，引用所有的数组元素
>for e in "${array[@]}"
>do
>echo "$e"
>done

6，以切片方式获取部分数组元素（@和*通配符差不多）
语法：${array[@]:start:length} 【得到的是一个字符串】
echo "${array[*]:2:4}"

若是想要仍返回一个数组，只需要在最外层加上圆括号。语法：(${array[@]:start:length})

对某个数组元素进行切片。语法：${array[n]:start:length}
注意：若是长度超过被切元素本身长度，自动切到末尾为止。

7，数组元素的替换【！仅仅是此次命令执行时文本的替换，并不修改原数组数据。】
语法：${array[@|*]/old/new}

===========================================================

四，数组的删除
1，删除数组中某个元素
语法：unset array[n]

2，删除整个数组
语法：unset array

===========================================================

五，数组的其他操作
1，复制数组
语法：newarray=("${array[@|*]}")

2，连接数组
语法：("${array1[@]}" "${array2[@]}")【注意两个stdout之间要保留一个空格！】

3，加载文件到数组
>content=(`cat "demo.txt"`)
>for s in "${content[@]}"
>do
>	echo "$s"
>done