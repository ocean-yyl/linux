1，对于一个单独的shell脚本来说，执行时，会为其创建一个新的shell进程，来解释并执行脚本中的代码。当脚本执行完，该shell进程自动结束。而对于一个函数，在调用的时候，系统并不会为其单独创建一个shell进程，而是在调用者的进程中直接解释并执行函数中的代码。

2，函数的定义
function_name()
{
    statement1
    statement2
    ~~
}
或者
function function_name()【累赘】
{
    statement1
    statement2
    ~~
}
注意：函数的定义与是否需要传递参数，再结构和形式上并没有区别。
若是需要传递参数，则在函数内部执行获取参数的命令。

3，函数的调用
对于含参函数的调用
function_name param1 param2 ~~ paramn
警告：参数之间以空格隔开，如果某个参数中含有空格，则应该使用引号''（或""）将其引用起来。

对于无参函数的调用
function_name
注意：定义函数要圆括号，而调用函数无圆括号。

4，函数的链接调用，递归调用。
在一个函数中可以调用执行另一个函数。

5，函数返回值
①return【return语句只能返回0~255之间的整数，实际上就是返回函数的退出状态码】
②使用echo语句
在函数中，将需要返回的数据写入标准输出（stdout），通常用echo。然后再调用程序中将函数的执行结果赋值给一个变量。这种做法实际上就是命令替换的一个变种。
例如：
len=$(length "abc123")
echo "legth of the string \"abc123 \" is $len"

6，别名
语法：
alias name="command"
name---要指定的别名
command---原有的shell命令
注意：别名和同命命令同时存在，用户自定义的别名优先执行。
别名和函数的相似：
函数是函数名到一组shell命令的映射，而别名是别名到一个shell命令的映射。
主要区别：
a,别名只能执行一个命令，而函数则可以执行一组。
b,别名中不能通过系统变量操作参数列表。


7，删除
删除别名---unalias name
删除函数---unset fun_name

8，移动位置参数
用户可以使用shift命令来使脚本的所有参数的位置向左移动一个位置，从而使得用户可以通过9以内的位置变量来获取超过9个的参数。
shift命令式将参数向左移动一个位置，同时删除原来的第一个参数。
注意：shift命令会影响到系统变量$#（命令行参数的个数）的值

9，通过getopts接收函数参数。
如果用户需要处理的情况比较多，或者是多个分支的情况，最好使用getopts
语法：
getopts optstring [args]
opstring---包含一个可以为getopts命令是别的选项名称列表，如果某个选选项名称后面跟随着一个冒号，则表示用户可以为该项提供参数值，参数值被保存在$OPTARG（一个内置系统变量）中。getopts会依次遍历每个选项，选项名称被保存在args变量中。

>while getopts "a:b:c" arg
>do
>case "$arg" in
>a)
>;;
>b)
>;;
>c)
>;;
>?)【未知选项】
>;;
>esac
>done

10，间接传递参数（相当于指针的引用）
语法---${!var_name}
例如：
>var=name
>name=John
>${name}【输出John】
>${!var}【输出John】

11，通过全局变量传递参数。
无论哪种程序设计语言，都不建议使用全局变量传递参数，原因在于会导致程序结构非常不清晰，代码可读性差。

12，传递数组参数
a=(a b "c d" e)
func "${a[@]}"【${a[@]}可以获取数组所有元素的值】
注意：若是不加引号引用，使用func ${a[@]}，第三个元素"c d"会被误认为是2个元素c和d

13，函数库文件
区别：脚本中包含定义和可执行代码，而库函数文件只包含函数。
语法：函数库文件调用---. filename【远点+空格+filename】
